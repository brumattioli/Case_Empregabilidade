# -*- coding: utf-8 -*-
"""Case_Rkg_Empregabilidade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13XhUCVwi5d_RgPBwfqMm7zPmY-ZG-5qR

Bruna Mattioli de Oliveira -
Case_Ranking_Empregabilidade

- Em jan/17, a empresa decidiu participar de um novo ranking nacional que medirá quais instituições de ensino melhor preparam seus alunos para o mercado de trabalho e para participar do ranking, todos alunos da empresa (de qualquer curso e de qualquer unidade) devem em outubro de 2018 participar de uma prova.
- Essa prova é diferente para cada curso e medirá o quanto os alunos estão preparados para competências exigidas pelo mercado de trabalho atual.
- Ao confirmar sua participação no ranking, a empresa criou um simulado para avaliar como seria seu desempenho na prova
- Em mai/21, o time de Planejamento Acadêmico apresentou os resultados do simulado no Comitê Acadêmico da empresa, composto pelo CEO, COO e  VP Acadêmico  
- Apesar do comitê julgar os resultados como satisfatórios, foi liberado adicional de R$1MM/semestre para serem gastos no 2° semestre de 2021, no 1° de 2022 e 2° de 2022 a fim de melhorar o desempenho da empresa no ranking
- Foi solicitado para o time de Planejamento Acadêmico, rapidamente traçar uma estratégia de como “investir” esse 1MM por semestre
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt

from google.colab import drive

drive.mount('/content/drive', force_remount=True)

base = pd.read_csv("/content/drive/MyDrive/1.Case_Rkg_Empregabilidade.csv", sep=';', encoding='latin-1', engine= 'python')

base.head(10)

base.describe()

"""A média total dos cursos foi 3.005138, sendo o desvio padrão 1.412429.
A média total da quantidade de alunos é de 44, sendo o desvio padrão 20, variando de 10 a 80 alunos.
"""

#Verificando a existência de valores nulos
base.isnull().sum()

#Removendo duplicadas
base2 = base.drop_duplicates(subset = None)

base2.head(10)

base2.describe()

media_geral = base2['DESEMPENHO_TURMA_PROVA'].mean()
media_geral

media_por_curso = base2.groupby(by="DESC_CURSO")['DESEMPENHO_TURMA_PROVA'].mean().sort_values(ascending=True)
media_por_curso

media_por_curso.plot.box(figsize=(10, 7), color = "green")
plt.title("Boxplot de distribuição da médias de notas")
plt.ylabel("Média de notas")

media_por_curso.plot.bar(figsize=(20, 10), color = "green")
plt.axhline(y = media_geral, color = 'blue', linestyle = '-')
plt.title("Distribuição da média de cada curso")
plt.xlabel("Cursos")
plt.ylabel("Nota média")

#Distribuição de quantidade de turmas por curso
turmas_por_curso = base2.groupby(by="DESC_CURSO")['COD_MATRIZ'].nunique().sort_values(ascending=True)
turmas_por_curso

turmas_por_curso.sum()

turmas_por_curso.plot.bar(figsize=(20, 10), color='green')
plt.title("Quantidade de turmas por curso")
plt.xlabel("Cursos")
plt.ylabel("Quantidade de turmas")

#Média de alunos por curso
media_alunos_por_curso = base2.groupby(by="DESC_CURSO")['QTD_ALUNOS'].mean().sort_values(ascending=True)
media_alunos_por_curso

media_alunos_por_curso.plot.bar(figsize=(20, 10), color = 'green')
plt.title("Quantidade média de alunos por curso")
plt.xlabel("Cursos")
plt.ylabel("Média de alunos")

#Cursos com maiores médias
media_por_curso.nlargest()

#Cursos com menores médias
media_por_curso.nsmallest()

#Extração da média de notas por turma
media_por_turma = base2.groupby(by="COD_MATRIZ")['DESEMPENHO_TURMA_PROVA'].mean()
media_por_turma

#Maiores médias por turma
media_por_turma.nlargest()

#Menores médias por turma
media_por_turma.nsmallest()

#Médias por unidade
media_por_unidade = base2.groupby(by="COD_UNIDADE")['DESEMPENHO_TURMA_PROVA'].mean()
media_por_unidade

#Maiores médias por unidade
media_por_unidade.nlargest()

#Menores médias por unidade
media_por_unidade.nsmallest()

#Extração da occorência de cada nota
occurrencia_por_nota = base2.groupby(['DESEMPENHO_TURMA_PROVA']).size()
occurrencia_por_nota

"""-Nas turmas que tiveram pior desempenho, independente do curso

-Nos cursos que tiveram pior desempenho

-Nas unidades que tiveram pior desempenho

#Análise das turmas com notas 1 e 2, uma vez que são detratores da média
"""

#Extração de turmas que tiveram desempenho menor ou igual a 2
filtro_nota_1_2=base2['DESEMPENHO_TURMA_PROVA']<=2
base_filtrada_nota_1_2 = base2[filtro_nota_1_2]
base_filtrada_nota_1_2

#Quantidade de turmas com nota 1 ou 2
len(base_filtrada_nota_1_2['COD_MATRIZ'].unique())

#Quantidade de cursos com nota 1 ou 2
len(base_filtrada_nota_1_2['DESC_CURSO'].unique())

#Quantidade de unidades com nota 1 ou 2
len(base_filtrada_nota_1_2['COD_UNIDADE'].unique())

#Piores turmas, quantas dessas de cada curso, quantos desses cursos são de cada unidade

#Agrupar as turmas com nota 1 ou 2 em cursos
qtde_turmas_nota_1_2_por_curso= base_filtrada_nota_1_2.groupby(['DESC_CURSO'])['COD_MATRIZ'].nunique().sort_values(ascending=False)
qtde_turmas_nota_1_2_por_curso.head(18)

qtde_turmas_nota_1_2_por_curso.plot.bar(figsize=(20, 10), color='green')
plt.title("Distribuição de cursos das turmas com nota 1 e 2")
plt.xlabel("Cursos")
plt.ylabel("Quantidade de turmas")

qtde_turmas_nota_1_2_por_curso.mean()

#Agrupar as turmas com nota 1 ou 2 em unidades
qtde_turmas_nota_1_2_por_unidade = base_filtrada_nota_1_2.groupby(['COD_UNIDADE'])['COD_MATRIZ'].nunique().sort_values(ascending=False)
qtde_turmas_nota_1_2_por_unidade.head(18)

qtde_turmas_nota_1_2_por_unidade.plot.bar(figsize=(20, 10), color = 'green')
plt.title("Distribuição de unidades das turmas com nota 1 e 2")
plt.xlabel("Unidades")
plt.ylabel("Quantidade de turmas")

qtde_turmas_nota_1_2_por_unidade.mean()